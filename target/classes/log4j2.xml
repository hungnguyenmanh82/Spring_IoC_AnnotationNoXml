<?xml version="1.0" encoding="UTF-8"?>
<!-- monitorInterval: cứ 30s check log4j2.xml nếu có thay đổi thì update, dùng cho chế độ dev -->
<!-- status: log level của internal log4j, nên để là WARN để tối ưu performance -->
<Configuration status="WARN" monitorInterval="30">

	<Properties>
		<!-- https://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout -->
		<!-- LogEvent trong Appender chứa thông tin đầy đủ nhất về các field trong log -->
		<!-- xem vd TestAppender sẽ hiểu bản chất của Log4j2 hoạt động thế nào -->
		<!--%d: date, %p: log level, %c{6}: className 6 cấp cả package, %m:message, %n là xuống dòng -->
		<Property name="LOG_PATTERN_1">%d [%p] %c{1} - %m%n</Property>
		<!-- %d{ISO8601}: đây là định dạng logstash đang dùng -->
		<Property name="LOG_PATTERN_2">%d{ISO8601} [%-6p] %c{2} - %m%n</Property>
		<!-- %c: là fullClassName gồm cả package -->
		<Property name="LOG_PATTERN_3">%d [%p] %c - %m%n</Property>

		<!-- %d{yyyy/MM/dd HH:mm:ss.SSS} định dạng đầu ra cho date -->
		<Property name="LOG_PATTERN_4">%d{yyyy/MM/dd HH:mm:ss.SSS} [%-6p] %c{1} -
			%m%n</Property>
		<!-- %F: file, %L: line -->
		<Property name="LOG_PATTERN_5">%d [%-6p] %c{1}.%M(%F:%L) - %m%n</Property>
		<Property name="LOG_PATTERN_6">%d [%-6p] %c{2}.%M(%F:%L) - %m%n</Property>
		<!-- %M: method -->
		<Property name="LOG_PATTERN_7">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-6p] %c.%M(%F:%L) - %m%n</Property>

		<!-- loại bỏ Date -->
		<Property name="LOG_PATTERN_8">[%-6p] %c{1}.%M(%F:%L) - %m%n</Property>
		<!-- để %c để xem fullpackage để loại bỏ package ra khỏi log -->
		<Property name="LOG_PATTERN_8_1">[%-6p] %c.%M(%F:%L) - %m%n</Property>

		<!-- show file ko cần location (%F:%L) -->
		<Property name="LOG_PATTERN_9">[%-6p] (%c{1}.java:1) - %m%n</Property>
		<!-- %tid: threadId, %tn threadName, %tp ThreadPriority -->
		<Property name="LOG_PATTERN_10">%tid:%tn:%tp [%-6p] %c{1}.%M(%F:%L) - %m%n</Property>

		<Property name="basePath">C:\\logs</Property>
		<Property name="basePath1">.</Property>
	</Properties>

	<Appenders>
		<Console name="console" target="SYSTEM_OUT">
			<PatternLayout pattern="${LOG_PATTERN_8_1}" />
		</Console>
	</Appenders>

	<!-- Nếu LogManager ko tìm thấy Logger Name nó sẽ lấy Root logger -->
	<!-- Loggers sẽ nhận log từ java code và write to Appenders -->
	<Loggers>
		<!-- all > trace > debug > info > warn > error >fatal -->
		<!-- includeLocation="true": thì sẽ show (%F:%L), nhung se lam giam performance -->
		<Root level="all" includeLocation="true">
			<AppenderRef ref="console" />
		</Root>

		<!-- dùng PackageName đề filter log level: -->
		<!-- com.logging.a -->
		<!-- com.logging.a.b -->
		<!-- com.logging.a.c -->
		<!-- tất cả các class thuộc package com.logging.a.b sẽ đc filter log level = WARN -->
		<!-- additivity = true logging của logger sẽ bị lặp lại ở các Parrent logger. "com.loging" là parent của "com.logging.a" -->
		<!-- nên để additivity = false: log sẽ chỉ ddc in ở appender của nó thôi. ko in ở appender của parrent logger -->
		<!-- nghĩa là LogEvent sau khi xử lý sẽ loại khỏi queue -->
		<!-- root là logger Parrent của mọi logger nên ko cần additivity -->
		<Logger name="org.springframework" level="info" additivity="false">
			<AppenderRef ref="console" />
		</Logger>

		<!-- tất cả các class thuộc package com.logging.a sẽ đc filter log level = WARN -->
		<!-- nên để additivity = false: log sẽ chỉ ddc in ở appender của nó thôi. ko in ở appender của parrent logger -->
		<Logger name="hung.com" level="all" additivity="false">
			<AppenderRef ref="console" />
		</Logger>

	</Loggers>

</Configuration>